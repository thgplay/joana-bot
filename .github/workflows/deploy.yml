name: CI‑CD Joana (runner interativo)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [ self-hosted, windows ]

    steps:
      # ---------------------------------------------------------------
      # 0. JAVA_HOME + PATH (JDK 21)                                   #
      # ---------------------------------------------------------------
      - name: Set JAVA_HOME + PATH
        shell: powershell
        run: |
          Add-Content $env:GITHUB_ENV "JAVA_HOME=C:\Program Files\Java\jdk-21"
          Add-Content $env:GITHUB_ENV "PATH=C:\Program Files\Java\jdk-21\bin;$env:PATH"

      # ---------------------------------------------------------------
      # 1. Checkout                                                   #
      # ---------------------------------------------------------------
      - uses: actions/checkout@v4

      # ---------------------------------------------------------------
      # 2. Mata instâncias antigas                                    #
      # ---------------------------------------------------------------
      - name: Encerrar Node + Java antigos
        shell: powershell
        run: |
          Get-CimInstance Win32_Process |
            Where-Object { $_.Name -eq 'node.exe' -and $_.CommandLine -match 'index\.js' } |
            ForEach-Object { Stop-Process -Id $_.ProcessId -Force }
          Get-CimInstance Win32_Process |
            Where-Object { $_.Name -eq 'java.exe' -and $_.CommandLine -match 'joana\.jar' } |
            ForEach-Object { Stop-Process -Id $_.ProcessId -Force }

      # ---------------------------------------------------------------
      # 3. Node 18 + cache npm                                        #
      # ---------------------------------------------------------------
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: src/main/javascript/package-lock.json

      - name: Cache node_modules
        id: node-cache
        uses: actions/cache@v4
        with:
          path: src/main/javascript/node_modules
          key:  ${{ runner.os }}-nm-${{ hashFiles('src/main/javascript/package-lock.json') }}
          restore-keys: ${{ runner.os }}-nm-

      - name: Instalar dependências Node (quando cache miss)
        if: steps.node-cache.outputs.cache-hit != 'true'
        working-directory: src/main/javascript
        run: npm ci --no-audit --no-fund --prefer-offline

      - name: Build front‑end (opcional)
        working-directory: src/main/javascript
        run: npm run build --if-present

      # ---------------------------------------------------------------
      # 4. Build Java / Maven                                         #
      # ---------------------------------------------------------------
      - name: Build joana.jar
        shell: powershell
        run: mvn -B clean package -DskipTests  # resources são incluídos no JAR

      # ---------------------------------------------------------------
      # 5. Copiar artefatos                                           #
      # ---------------------------------------------------------------
      - name: Copiar artefatos
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          
          $prodRoot = 'C:\Apps\Joana'
          $nodeDst  = Join-Path $prodRoot 'js'
          $jarDst   = Join-Path $prodRoot 'joana.jar'
          
          New-Item -ItemType Directory -Path $nodeDst -Force | Out-Null
          
          # --- JAR ---
          $jar = Get-ChildItem "$env:GITHUB_WORKSPACE\target" -Filter 'joana*.jar' |
                 Select-Object -First 1
          if (-not $jar) { throw 'JAR não encontrado.' }
          Copy-Item $jar.FullName $jarDst -Force
          
          # --- código Node (.env incluído) ---
          $nodeSrc = Join-Path $env:GITHUB_WORKSPACE 'src\main\javascript'
          $distDir = Join-Path $nodeSrc 'dist'
          
          if (Test-Path $distDir) {
            robocopy $distDir $nodeDst /MIR /NFL /NDL /NJH /NJS /NP
            $rc = $LASTEXITCODE
          } else {
            robocopy $nodeSrc $nodeDst /MIR /XF package*.json /XD node_modules /NFL /NDL /NJH /NJS /NP
            $rc = $LASTEXITCODE
          }
          
          # garante .env (sempre na raiz js)
          if (Test-Path (Join-Path $nodeSrc '.env')) {
            Copy-Item (Join-Path $nodeSrc '.env') (Join-Path $nodeDst '.env') -Force
            Write-Host ".env copiado para pasta js"
          }
          
          if ($rc -ge 8) { exit $rc } else { exit 0 }

      # ---------------------------------------------------------------
      # 6. Inicia Node + Spring em janelas interativas                #
      # ---------------------------------------------------------------
      - name: Iniciar Joana Node + Java (consoles)
        shell: powershell
        run: |
          $prodRoot = 'C:\Apps\Joana'
          $nodeDir  = Join-Path $prodRoot 'js'
          $envFile  = Join-Path $nodeDir '.env'
          
          # carrega .env no ambiente do processo atual
          if (Test-Path $envFile) {
            Get-Content $envFile | ForEach-Object {
              if ($_ -match '^\s*([^#=]+?)\s*=\s*(.*)\s*$') {
                [System.Environment]::SetEnvironmentVariable(
                  $matches[1].Trim(),
                  $matches[2].Trim('" '),
                  'Process'
                )
              }
            }
          }
          
          # janela Node
          Start-Process cmd.exe -WindowStyle Normal `
            -ArgumentList '/k node -r dotenv/config index.js' `
            -WorkingDirectory $nodeDir
          
          # janela Java
          Start-Process cmd.exe -WindowStyle Normal `
            -ArgumentList '/k java -jar joana.jar' `
            -WorkingDirectory $prodRoot
          
          exit 0
