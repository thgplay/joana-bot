name: CI‑CD Joana (self‑hosted Windows + NSSM)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [ self-hosted, windows ]

    #################################################################
    # 0. JAVA_HOME + PATH                                           #
    #################################################################
    steps:
      - name: Set JAVA_HOME e PATH
        shell: powershell
        run: |
          Add-Content $env:GITHUB_ENV "JAVA_HOME=C:\Program Files\Java\jdk-21"
          Add-Content $env:GITHUB_ENV "PATH=C:\Program Files\Java\jdk-21\bin;$env:PATH"

      #################################################################
      # 1. Checkout (2 commits para diff JS)                          #
      #################################################################
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      #################################################################
      # 2. Node (cache npm + node_modules)                            #
      #################################################################
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: src/main/javascript/package-lock.json

      - name: Cache node_modules
        id: node-cache
        uses: actions/cache@v4
        with:
          path: src/main/javascript/node_modules
          key:  ${{ runner.os }}-nm-${{ hashFiles('src/main/javascript/package-lock.json') }}
          restore-keys: ${{ runner.os }}-nm-

      - name: Install Node deps
        if: steps.node-cache.outputs.cache-hit != 'true'
        working-directory: src/main/javascript
        run: npm ci --no-audit --no-fund --prefer-offline

      - name: Build JS (executa só se mudou)
        working-directory: src/main/javascript
        shell: powershell
        run: |
          git rev-parse --verify HEAD~1 2>$null
          if ($LASTEXITCODE -eq 0) {
            git diff --quiet HEAD~1 HEAD -- src/main/javascript
            $needBuild = ($LASTEXITCODE -ne 0)
          } else { $needBuild = $true }
          
          if ($needBuild) {
            Write-Host "Alterações em JS → executando build"
            npm run build --if-present
          } else {
            Write-Host "Nenhuma alteração em JS → pulando build"
          }

      #################################################################
      # 3. Build Java / Maven                                         #
      #################################################################
      - name: Build joana.jar
        shell: powershell
        run: mvn -B clean package -DskipTests

      #################################################################
      # 4. Copiar artefatos para C:\Apps\Joana                        #
      #################################################################
      - name: Copiar artefatos
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $prodRoot = 'C:\Apps\Joana'
          $nodeDst  = Join-Path $prodRoot 'js'
          $jarDst   = Join-Path $prodRoot 'joana.jar'
          
          New-Item -ItemType Directory -Path $nodeDst -Force | Out-Null
          
          $jar = Get-ChildItem "$env:GITHUB_WORKSPACE\target" -Filter 'joana*.jar' | Select-Object -First 1
          if (-not $jar) { throw 'JAR não encontrado.' }
          Copy-Item $jar.FullName $jarDst -Force
          
          $nodeSrc = Join-Path $env:GITHUB_WORKSPACE 'src\main\javascript'
          $distDir = Join-Path $nodeSrc 'dist'
          
          if (Test-Path $distDir) {
            robocopy $distDir $nodeDst /MIR /NFL /NDL /NJH /NJS /NP
            $rc = $LASTEXITCODE
          } else {
            robocopy $nodeSrc $nodeDst /MIR /XF package*.json /NFL /NDL /NJH /NJS /NP
            $rc = $LASTEXITCODE
          }
          if ($rc -ge 8) { exit $rc } else { exit 0 }

      #################################################################
      # 5. (Novo) Reiniciar ou criar serviços NSSM                    #
      #################################################################
      - name: Garantir serviços Joana (NSSM)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $nssm   = 'C:\Windows\System32\nssm.exe'
          $appDir = 'C:\Apps\Joana'
          $nodeExe= 'C:\Program Files\nodejs\node.exe'
          $jarExe = 'C:\Program Files\Java\jdk-21\bin\java.exe'
          
          function Ensure-Service($name,$exe,$args,$dir) {
            sc.exe query $name 2>$null | Out-Null
            $exists = ($LASTEXITCODE -eq 0)
          
            if (-not $exists) {
              Write-Host "$name não existe → criando."
              & $nssm install $name "`"$exe`"" $args
              & $nssm set     $name AppDirectory $dir
              & $nssm set     $name Start SERVICE_AUTO_START
            } else {
              Write-Host "$name já existe → mantendo configuração."
            }
          
            sc.exe start $name 2>$null | Out-Null
            if ($LASTEXITCODE -le 1) {  # 0 = iniciado, 1056 = já rodando
              Write-Host "$name em execução."
            } else {
              throw "Falha ao iniciar $name (código $LASTEXITCODE)."
            }
          }
          
          $nodeArgs = "`"$appDir\js\index.js`""
          $javaArgs = "-jar `"$appDir\joana.jar`""
          
          Ensure-Service 'JoanaNode' $nodeExe $nodeArgs "$appDir\js"
          Ensure-Service 'JoanaJava' $jarExe  $javaArgs  $appDir
          
          Write-Host 'Serviços JoanaNode e JoanaJava OK.'
          exit 0


