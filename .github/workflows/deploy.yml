name: CI-CD Joana (Windows VPS)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-joana
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, windows]
    permissions:
      contents: read

    env:
      APP_ROOT: C:\Apps\Joana
      NODE_DIR: C:\Apps\Joana\js
      JAR_DST:  C:\Apps\Joana\joana.jar
      NSSM_EXE: C:\nssm\nssm.exe
      SVC_NODE: joana-node
      SVC_JAVA: joana-java

    steps:
      # 0) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 0.1) Localizar Git no sistema e injetar no PATH do job (não usa npm aqui)
      - name: Localizar Git para o job
        id: git
        shell: powershell
        run: |
          Write-Host "Rodando como: $([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)"
          $gitResolved = $false
          try {
            $gitPath = (Get-Command git -ErrorAction Stop).Source
            $gitResolved = $true
            Write-Host "git encontrado no PATH: $gitPath"
          } catch {}
          if (-not $gitResolved) {
            $candidatos = @(
              'C:\Program Files\Git\cmd',
              'C:\Program Files\Git\bin',
              'C:\Program Files (x86)\Git\cmd',
              'C:\Program Files (x86)\Git\bin'
            )
            foreach ($p in $candidatos) { if (Test-Path $p) { Add-Content $env:GITHUB_PATH $p } }
            try {
              $gitPath = (Get-Command git -ErrorAction Stop).Source
              $gitResolved = $true
              Write-Host "git encontrado após injetar PATH: $gitPath"
            } catch {}
          }
          if (-not $gitResolved) { throw "git.exe não encontrado. Instale Git for Windows." }
          git --version
          "GIT_EXE=$gitPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # 1) Java 21 + cache Maven
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # 2) Detectar pasta Node
      - name: Detectar pasta Node
        id: detect
        shell: powershell
        run: |
          $p1 = Join-Path $env:GITHUB_WORKSPACE 'main\javascript'
          $p2 = Join-Path $env:GITHUB_WORKSPACE 'src\main\javascript'
          if (Test-Path $p1) { $nodeSrc = $p1 }
          elseif (Test-Path $p2) { $nodeSrc = $p2 }
          else { Write-Error "Pasta Node não encontrada."; exit 1 }
          "nodeSrc=$nodeSrc" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "pkgJson=$(Join-Path $nodeSrc 'package.json')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "pkgLock=$(Join-Path $nodeSrc 'package-lock.json')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "distDir=$(Join-Path $nodeSrc 'dist')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "envFile=$(Join-Path $nodeSrc '.env')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # 3) Node 22 LTS + cache npm
      - name: Setup Node 22 LTS
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: |
            main/javascript/package-lock.json
            src/main/javascript/package-lock.json

      - name: Mostrar versões Node/npm do job
        shell: powershell
        run: |
          node -v
          npm -v

      # 3.1) Limpar node_modules (Windows EPERM fix)
      - name: Limpar node_modules (Windows fix)
        if: ${{ hashFiles(steps.detect.outputs.pkgJson) != '' }}
        shell: powershell
        working-directory: ${{ steps.detect.outputs.nodeSrc }}
        run: |
          if (Test-Path 'node_modules') {
            Write-Host "Removendo node_modules com retry..."
            for ($i=0; $i -lt 5; $i++) {
              try { Remove-Item -LiteralPath 'node_modules' -Recurse -Force -ErrorAction Stop; break }
              catch { Start-Sleep -Seconds 2 }
            }
            if (Test-Path 'node_modules') {
              Write-Host "Tentando via cmd /C rmdir..."
              cmd /c rmdir /S /Q node_modules
            }
          }

      # 3.2) Instalar deps Node (ci com fallback p/ install)
      - name: Instalar deps Node (ci com fallback)
        if: ${{ hashFiles(steps.detect.outputs.pkgJson) != '' }}
        shell: powershell
        working-directory: ${{ steps.detect.outputs.nodeSrc }}
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          $hasLock = Test-Path "${{ steps.detect.outputs.pkgLock }}"
          if ($hasLock) {
            Write-Host 'Tentando npm ci (lock encontrado)...'
            npm ci --no-audit --no-fund
            $rc = $LASTEXITCODE
            if ($rc -ne 0) {
              Write-Warning 'npm ci falhou (lock possivelmente desatualizado). Fallback para npm install...'
              npm install --no-audit --no-fund --prefer-offline
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
            }
          } else {
            Write-Host 'Sem lockfile — usando npm install.'
            npm install --no-audit --no-fund --prefer-offline
            if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          }

      - name: Build front-end (se existir)
        if: ${{ hashFiles(steps.detect.outputs.pkgJson) != '' }}
        shell: powershell
        working-directory: ${{ steps.detect.outputs.nodeSrc }}
        run: npm run build --if-present

      # 4) Encerrar instâncias antigas
      - name: Encerrar Node + Java antigos
        shell: powershell
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          Get-CimInstance Win32_Process |
            Where-Object { $_.Name -eq 'node.exe' -and $_.CommandLine -match '\\js\\index\.js' } |
            ForEach-Object { Stop-Process -Id $_.ProcessId -Force }
          Get-CimInstance Win32_Process |
            Where-Object { $_.Name -eq 'java.exe' -and $_.CommandLine -match 'joana\.jar' } |
            ForEach-Object { Stop-Process -Id $_.ProcessId -Force }

      # 5) Build JAR
      - name: Build JAR
        shell: powershell
        run: mvn -B -DskipTests clean package

      # 6) Copiar artefatos
      - name: Copiar artefatos
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path "$env:APP_ROOT" | Out-Null
          New-Item -ItemType Directory -Force -Path "$env:NODE_DIR" | Out-Null

          # --------- JAR ---------
          $jar = Get-ChildItem "$env:GITHUB_WORKSPACE\target" -Filter '*.jar' |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $jar) { throw 'JAR não encontrado em target/.' }
          Copy-Item $jar.FullName "$env:JAR_DST" -Force

          # --------- Função Robocopy com exclusões + normalização do RC ---------
          function Invoke-Robo($src,$dst) {
            # Exclusões:
            #  - arquivos: .env, prompt_joana.txt, application.properties
            #  - pastas : auth_info (login), logs (seus logs), whatsapp cache, etc
            $args = @(
              $src, $dst, '/MIR',
              '/NFL','/NDL','/NJH','/NJS','/NP',
              '/R:2','/W:2','/FFT',
              '/XF', '.env', 'prompt_joana.txt', 'application.properties', 'whatsapp-qr.png', 'whatsapp-qr.txt', 'package-lock.json',
              '/XD', 'auth_info', 'logs', '.cache', '.tmp'
            )
            cmd /c robocopy @args
            $rc = $LASTEXITCODE
            # Robocopy: 0–7 = sucesso; >=8 = erro
            if ($rc -ge 8) { Write-Error "robocopy falhou com código $rc"; exit $rc }
            # Zera para o job não falhar em RC=1 (EXTRA/MISMATCH)
            $global:LASTEXITCODE = 0
          }

          # --------- Node: copie dist/ se existir; senão, a pasta inteira do JS ---------
          $nodeSrc = "${{ steps.detect.outputs.nodeSrc }}"
          $distDir = "${{ steps.detect.outputs.distDir }}"
          if (Test-Path $distDir) {
            Invoke-Robo $distDir $env:NODE_DIR
            if (Test-Path (Join-Path $nodeSrc 'node_modules')) {
              Invoke-Robo (Join-Path $nodeSrc 'node_modules') (Join-Path $env:NODE_DIR 'node_modules')
            }
          } else {
            Invoke-Robo $nodeSrc $env:NODE_DIR
          }

          # --------- .env: NÃO sobrescrever; só copie se quiser substituir explicitamente ---------
          # if (Test-Path (Join-Path $nodeSrc '.env')) {
          #   Copy-Item (Join-Path $nodeSrc '.env') (Join-Path $env:NODE_DIR '.env') -Force
          # }

          # --------- package-lock.json (copiar ao final se existir no repo) ---------
          $lockFile = (Join-Path $nodeSrc 'package-lock.json')
          if (Test-Path $lockFile) {
            Copy-Item $lockFile (Join-Path $env:NODE_DIR 'package-lock.json') -Force
          }
      

      # 7) (opcional) criar arquivos sensíveis via secrets
      # - name: Criar application.properties
      #   shell: powershell
      #   run: |
      #     if ('${{ secrets.APP_PROPERTIES }}' -ne '') {
      #       Set-Content -Path "$env:APP_ROOT\application.properties" -Value "${{ secrets.APP_PROPERTIES }}"
      #     }
      # - name: Criar prompt_joana.txt
      #   shell: powershell
      #   run: |
      #     if ('${{ secrets.PROMPT_JOANA }}' -ne '') {
      #       Set-Content -Path "$env:APP_ROOT\prompt_joana.txt" -Value "${{ secrets.PROMPT_JOANA }}"
      #     }

      # 8) NSSM: garantir Node 22 no runtime e reiniciar serviços
      - name: (NSSM) Garantir e reiniciar serviços
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path $env:NSSM_EXE)) { throw "NSSM não encontrado em $env:NSSM_EXE." }

          # Node do serviço (22+)
          $nodeExe = 'C:\Program Files\nodejs\node.exe'
          if (-not (Test-Path $nodeExe)) { throw "Node 22 não encontrado em $nodeExe. Instale Node 22 LTS na VPS." }
          Write-Host "Node runtime (serviço): $(& "$nodeExe" -v)"

          $javaExe = (Get-Command java).Source

          # Pastas necessárias
          New-Item -ItemType Directory -Force -Path "$env:APP_ROOT\logs" | Out-Null
          New-Item -ItemType Directory -Force -Path "$env:NODE_DIR\auth_info" | Out-Null

          function Ensure-Service($name, $app, $dir, $params) {
            $svc = Get-Service -Name $name -ErrorAction SilentlyContinue
            if (-not $svc) {
              & $env:NSSM_EXE install $name $app $params
            } else {
              & $env:NSSM_EXE set $name Application  $app
              & $env:NSSM_EXE set $name AppParameters $params
            }
            & $env:NSSM_EXE set $name AppDirectory $dir
            & $env:NSSM_EXE set $name Start SERVICE_AUTO_START
          }

          Ensure-Service $env:SVC_NODE "$nodeExe" $env:NODE_DIR "-r dotenv/config index.js"
          Ensure-Service $env:SVC_JAVA "$javaExe"   $env:APP_ROOT "-jar joana.jar"

          # Logs do Node
          & $env:NSSM_EXE set $env:SVC_NODE AppStdout "$env:APP_ROOT\logs\joana-node.out.log"
          & $env:NSSM_EXE set $env:SVC_NODE AppStderr "$env:APP_ROOT\logs\joana-node.err.log"
          & $env:NSSM_EXE set $env:SVC_NODE AppRotateFiles 1
          & $env:NSSM_EXE set $env:SVC_NODE AppRotateBytes 10485760
          & $env:NSSM_EXE set $env:SVC_NODE AppRotateDelay 86400

          # >>> AppEnvironmentExtra como REG_MULTI_SZ (um argumento por variável, sem vírgulas, sem quebras de linha)
          & $env:NSSM_EXE set $env:SVC_NODE AppEnvironmentExtra `
            "LOG_DIR=$env:APP_ROOT\logs" `
            "AUTH_DIR=$env:NODE_DIR\auth_info" `
            "DEBUG=baileys:*"

          # Restart com pequena espera
          function Restart-Svc($name) {
            try { & $env:NSSM_EXE stop  $name | Out-Null } catch {}
            Start-Sleep -Seconds 2
            & $env:NSSM_EXE start $name | Out-Null
          }

          Restart-Svc $env:SVC_NODE
          Restart-Svc $env:SVC_JAVA

          Write-Host "NSSM: serviços reiniciados."
      
      

      # 9) Smoke test
      - name: Smoke test
        shell: powershell
        continue-on-error: true
        run: |
          Start-Sleep -Seconds 5
          try {
            $res = Invoke-WebRequest -UseBasicParsing -Method POST `
              -Uri 'http://localhost:8080/api/webhook' `
              -Body (@{ text = 'ping'; from = 'ci@local' } | ConvertTo-Json) `
              -ContentType 'application/json' -TimeoutSec 10
            Write-Host "Webhook HTTP $($res.StatusCode)"
          } catch {
            Write-Warning "Smoke test falhou: $($_.Exception.Message)"
          }
